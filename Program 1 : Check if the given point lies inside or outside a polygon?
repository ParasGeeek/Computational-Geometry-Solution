Code:

#include<iostream>
#include<cmath>
#include<bits/stdc++.h>
using namespace std;

#define INF 10000

struct Point  //It is representing the co-ordinate of the points
{
  int x;
  int y;
};

bool onSegment(Point p, Point q, Point r)
{
  if(q.x<=max(p.x,r.x) && q.x >=min(p.x,r.x) && q.y<=max(p.y,r.y) && q.y>=min(p.y,r.y))
  {
    return true;
  }
}

int orientation(Point p,Point q, Point r)
{
  int val=(q.y-p.y)*(r.x-q.y)-(q.x-p.x)*(r.y-q.y);
  if(val==0)
  {
    return 0;
  }
  return (val>0)?1:2;
}

bool doIntersect(Point p1,Point q1,Point p2,Point q2)
{
  int d1=orientation(p1,q1,p2);
  int d2=orientation(p1,q1,q2);
  int d3=orientation(p2,q2,p1);
  int d4=orientation(p2,q2,q1);

  if(d1!=d2 && d3!=d4)
  {
    return true;
  }
  if(d1==0 && onSegment(p1,p2,q1))
  {
    return true;
  }
  if(d2==0 && onSegment(p1,q2,q1))
  {
    return true;
  }
  if(d3==0 && onSegment(p2,p1,q2))
  {
    return true;
  }
  if(d4==0 && onSegment(p2,q1,q2))
  {
    return true;
  }
  return false;
}

bool isInside(Point polygon[],int n,Point)
{
  if(n<3)
  {
    return false;
  }
  Point extreme={INF,p.y};
  int count=0;
  int i=0;
  do{
    int next=(i+1)%n;
    if(doIntersect(polygon[i],polygon[next],p,extreme))
    {
      if(orientation(polygon[i],p,polygon[next])==0)
      {
        return onSegment(polygon[i],p,polygon[next])
      }
      count++;
    }
    i=next;
  }while(i!=0);
  return count&1;
}

int main()
{
  Point polygon[]={{1,0},{8,3},{8,8},{1,5}};
  Point p={0,0};
  int n=4;
  if(isInside(polygon,n,p))
  {
    std::cout<<"True"<<endl;
  }
  else
  {
    std::cout<<"False"<<endl;
  }
  return 0;
}
